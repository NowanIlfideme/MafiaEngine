from mafia_engine.base import GameObject, Action, Y

from ruamel.yaml import YAML, yaml_object

class AbilityError(Exception): """Something wrong with an ability."""

@yaml_object(Y)
class AbilityRestriction(GameObject): # TODO: DEPRECATED Remove.
    """Represents a callable "restriction" object, used to check
    whether an ability is legal to use."""

    yaml_tag = u"!AbilityRestriction"

    def __init__(self, *args, **kwargs):
        """
        Keys: name
        """
        super().__init__(self, *args, **kwargs)
        pass

    def __call__(self, abil, *args, **kwargs):
        """Override this! Return True if you allow. 
        In case of argument error, Raise AbilityError.
        Make sure to call the super's method."""

        #super().__call__(abil, *args, **kwargs) #ONLY for descendants
        if not isinstance(abil, Ability):
            raise AbilityError("Wrong type. 'abil' should be 'self'. \
Exptected Ability, recieved " + str(abil.__class__.__name__))
        return True

    pass


@yaml_object(Y)
class Ability(GameObject):
    """Denotes an ability, which can be used as an Action.
    This is a base type for Activated and Automatic abilities
    (akin to Magic: The Gathering's system). """

    def __init__(self, *args, **kwargs):
        """
        Keys: name
        """
        super().__init__(self, *args, **kwargs)
        self.name = kwargs.get("name","")
        #TODO: Add data memebers

        pass
    
    @property
    def action_type(self):
        """Gets the type of Action generated by this Ability.
        Override this!"""
        return Action

    def repr_map(self):
        """Map to use as representation (to create your self).
        Override or extend this for each child!"""

        res = super().repr_map()
        res.update( { 
            } )
        return res

    pass

@yaml_object(Y)
class ActivatedAbility(Ability):
    """Ability that gets activated by an Entity.
    This (usually) generates an Action and Event when used."""

    def __init__(self, *args, **kwargs):
        """
        Keys: name, action_type (Type), restrictions (list of function - deprecated?)
        where functions are of form restriction(ActivatedAbility, *args, **kwargs)
        and throw AbilityError if failed
        """
        super().__init__(self, *args, **kwargs)

        self.restrictions = kwargs.get("restrictions",[])
        pass

    
    def action(self, *args, **kwargs):
        """
        Keys: actor, target
        """
        act = self.action_type()

        for r in self.restrictions:
            try:
                if not r(self, *args, **kwargs): 
                    #If we fail even one restriction, we must return
                    raise AbilityError("Abilitiy failed due to restriction: %s." % r) #For debuggingg
                    return #TODO: Add return value from actions?
            except AbilityError as e:
                raise #for debugging; in real life, you'd want to return
    
        
        act(*args,**kwargs)

        # NOTE: No need to signal, Action does it for you.
        #target = kwargs.get("target", None)
        #actor = kwargs.get("actor", None)
        #self.send_signal(self.name,
        #                 parameters = {
        #                     "actor":actor,
        #                     "target":target}
        #                 )
        pass
    
    def repr_map(self):
        """Map to use as representation (to create your self).
        Override or extend this for each child!"""

        res = super().repr_map()
        res.update( { 
            "restrictions":self.restrictions,
            } )
        return res

    pass

@yaml_object(Y)
class AutomaticAbility(Ability):
    """Ability that triggers from an Event.
    This might generate a new Action + Event."""

    def __init__(self, *args, **kwargs):
        super().__init__(self, *args, **kwargs)
        """
        Keys: name, action
        """
        #TODO: Add data members
        #TODO: Add triggers! Implement.

        pass
    
    def repr_map(self):
        """Map to use as representation (to create your self).
        Override or extend this for each child!"""

        res = super().repr_map()
        res.update( { 
            
            } )
        return res


    pass
