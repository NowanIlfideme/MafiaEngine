from mafia_engine.base import *

from ruamel.yaml import YAML, yaml_object


@yaml_object(Y)
class Ability(GameObject):
    """Denotes an ability, which can be used as an Action.
    This is a base type for Activated and Automatic abilities
    (akin to Magic: The Gathering's system). """

    yaml_tag = u"!Ability"

    def __init__(self, name="", **kwargs):
        """
        Keys: name
        """
        super().__init__(name=name, **kwargs)
        #TODO: Add data memebers

        pass
    
    @property
    def action_type(self):
        """Gets the type of Action generated by this Ability.
        Override this!"""
        return Action

    def repr_map(self):
        """Map to use as representation (to create your self).
        Override or extend this for each child!"""

        res = super().repr_map()
        res.update( { 
            } )
        return res

    pass

@yaml_object(Y)
class ActivatedAbility(Ability):
    """Ability that gets activated by an Entity.
    This (usually) generates an Action and Event when used.
    Restrictions are AbilityRestriction objects that get subscribed to
    to PreActionEvent for our Action.
    """

    def __init__(self, restrictions=[], **kwargs):
        super().__init__(**kwargs)
        self.restrictions = restrictions
        for r in restrictions:
            self.engine.event.subscribe(PreActionEvent(self.action_type()), r)
        #

        pass
    
    def action(self, **kwargs):
        act = self.action_type(**kwargs)
        act.run()
        pass
    
    def repr_map(self):
        """Map to use as representation (to create your self).
        Override or extend this for each child!"""

        res = super().repr_map()
        res.update( { 
            "restrictions":self.restrictions,
            } )
        return res

    pass

@yaml_object(Y)
class AutomaticAbility(Ability):
    """Ability that triggers from an Event.
    This might generate a new Action + Event."""

    def __init__(self, name="", **kwargs):
        super().__init__(name=name, **kwargs)
        """
        Keys: name
        """
        #TODO: Add data members
        #TODO: Add triggers! Implement.

        pass
    
    def repr_map(self):
        """Map to use as representation (to create your self).
        Override or extend this for each child!"""

        res = super().repr_map()
        res.update( { 
            
            } )
        return res


    pass



@yaml_object(Y)
class AbilityRestriction(ProxyObject):

    def __init__(self, name="", **kwargs):
        super().__init__(name=name, **kwargs)

        pass

    def signal(self, event):
        if isinstance(event, PreActionEvent):
            action = event.action
            self.test(action)
            pass
        pass

    def test(self, action):
        """Cancels action if not allowed.
        Override this!"""
        pass
    pass

